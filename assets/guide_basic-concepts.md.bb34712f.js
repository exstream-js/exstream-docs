import{_ as s,c as a,o as n,a as e}from"./app.c19941e4.js";const o="/assets/exstream-graph-1.mmd-dark.6b902964.svg",l="/assets/exstream-graph-1.mmd-light.4923b1f1.svg";const F=JSON.parse('{"title":"Basic concepts","description":"","frontmatter":{},"headers":[{"level":2,"title":"Flow structure","slug":"flow-structure"},{"level":2,"title":"Laziness","slug":"laziness"},{"level":2,"title":"Synchronous vs Asynchronous","slug":"synchronous-vs-asynchronous"},{"level":2,"title":"Synchronous use cases","slug":"synchronous-use-cases"},{"level":2,"title":"Asynchronous use cases","slug":"asynchronous-use-cases"},{"level":2,"title":"Streaming use cases","slug":"streaming-use-cases"}],"relativePath":"guide/basic-concepts.md"}'),p={name:"guide/basic-concepts.md"},t=e('<h1 id="basic-concepts" tabindex="-1">Basic concepts <a class="header-anchor" href="#basic-concepts" aria-hidden="true">#</a></h1><h2 id="flow-structure" tabindex="-1">Flow structure <a class="header-anchor" href="#flow-structure" aria-hidden="true">#</a></h2><p>A simple Exstream flow can be imagined as composed by 3 parts:</p><img class="dark" src="'+o+'"><img class="light" src="'+l+`"><p>The data flows from Source, is transformed by Transformer, and then flows to Destination.</p><ul><li><b>Source</b> can be an Array containing the actual data but can also be another Exstream instance, a Readable Node.js Stream, or other type of sources (see <a href="./type-of-sources">Type of Sources</a> to get a comprehensive list).</li><li><b>Transformer</b> is a composition of methods (like map, filters, reduce, etc) that performs the data manipulation</li><li><b>Destination</b> can be an Array, a Node.js writable stream, or a Promise that resolves with the results. Sometimes we don&#39;t even need a Destination, because we&#39;re using Exstream to control the flow of the data in an asynchronous context but we don&#39;t need to actually &quot;pipe&quot; that data to a Destination</li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>A complex Stream, as we&#39;ll see in the <a href="./forking-and-merging">Forking and Merging</a> chapter, can involve more than 1 source and more than 1 destination, but let&#39;s start easy for now</p></div><h2 id="laziness" tabindex="-1">Laziness <a class="header-anchor" href="#laziness" aria-hidden="true">#</a></h2><p>An Exstream flow is lazy by default. This means we&#39;re only definining what to do with the data, but we&#39;ll need to call a consumption method (see also <a href="./consumption-methods">Consumption methods</a>) to actually start the flow.</p><p>Consider this snippet of code:</p><div class="language-js"><button class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> myFlow </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">_</span><span style="color:#A6ACCD;">([</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reduce1</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">sum</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> sum </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> x)</span></span>
<span class="line"></span></code></pre></div><p>In the above example, we have defined a flow called <code>myFlow</code>, that sums together all the source values, emitting a single item containing the sum. As said, however, the flow will not start automatically, because we have only defined the intended behaviour. This is called <i>lazy evaluation</i>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The same code written in plain javascript (<code>[1,2,3].reduce((sum, x) =&gt; sum + x, 0)</code>) gives you back directly the result of the sum. This is an example of an <i>eager evaluation</i></p></div><p>To actually consume the flow, we have to call the consumption method that best fit our needs. For example, we can just store the value in a variable calling the <code>.value()</code> consumption method:</p><div class="language-js"><button class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> myFlow </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">_</span><span style="color:#A6ACCD;">([</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reduce1</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">sum</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> sum </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> x)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> res </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> myFlow</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">value</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#676E95;">//res is 6</span></span>
<span class="line"></span></code></pre></div><p>In the next sections we&#39;ll see a couple of typical examples to better understand the different way in which we can define a flow</p><h2 id="synchronous-vs-asynchronous" tabindex="-1">Synchronous vs Asynchronous <a class="header-anchor" href="#synchronous-vs-asynchronous" aria-hidden="true">#</a></h2><p>Exstream is able to handle both synchronous and asynchronous data flows.</p><p>A synchronous flow is one in which:</p><ul><li><b>The Source emits data synchronously</b> (examples of synchronous sources are an Array or, more generically, an iterator)</li><li><b>The Transformer does not involve any asynchronous transform</b> (for example <code>resolve</code> or <code>asyncFilter</code>)</li><li><b>The Destination is an in-memory variable</b></li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>In all the other cases the Stream is considered asynchronous</p></div><p>A synchronous Stream is consumed (as you can imagine) synchronously. So, for example:</p><div class="language-js"><button class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> _ </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">exstream.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> values </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">_</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">c</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">])</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toUpperCase</span><span style="color:#A6ACCD;">())</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">values</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">//values is already available and is equal to [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(values)</span></span>
<span class="line"></span></code></pre></div><p>Instead, an asynchronous Stream behaves in a different way:</p><div class="language-js"><button class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> _ </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">exstream.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> values </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">_</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">c</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">])</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toUpperCase</span><span style="color:#A6ACCD;">())</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">values</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(values)</span></span>
<span class="line"><span style="color:#676E95;">// values is a Promise!!!</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// we need to wait for the stream to finish to get access to the results</span></span>
<span class="line"><span style="color:#A6ACCD;">values</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;">results</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">results</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">//results is [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>We&#39;re seeing here one of the most common consumption methods: <code>.values()</code>. This method collects all the values emitted by the stream and returns an array containing the results in case the stream is synchronous, or a <code>Promise</code> that resolves with an array containing the results in case the Stream is asynchronous.</p><p>We&#39;ll see other consumption methods in the next examples</p></div><h2 id="synchronous-use-cases" tabindex="-1">Synchronous use cases <a class="header-anchor" href="#synchronous-use-cases" aria-hidden="true">#</a></h2><h2 id="asynchronous-use-cases" tabindex="-1">Asynchronous use cases <a class="header-anchor" href="#asynchronous-use-cases" aria-hidden="true">#</a></h2><h2 id="streaming-use-cases" tabindex="-1">Streaming use cases <a class="header-anchor" href="#streaming-use-cases" aria-hidden="true">#</a></h2>`,30),c=[t];function r(i,y,A,D,C,u){return n(),a("div",null,c)}const d=s(p,[["render",r]]);export{F as __pageData,d as default};
